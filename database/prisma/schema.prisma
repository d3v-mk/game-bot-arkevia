/// üîß Arquivo schema.prisma
/// 
/// Esse √© o arquivo principal de configura√ß√£o do Prisma.
/// Aqui voc√™ define:
/// - O banco de dados que ser√° usado (datasource)
/// - O client que ser√° gerado (generator)
/// - E todos os modelos do banco (model, enum, etc)
///
/// Comandos √∫teis:
/// - `npx prisma generate` ‚Üí Cria o Prisma Client
/// - `npx prisma migrate dev` ‚Üí Aplica as migrations
///

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}





// ==============================
// üì¶ Model: Jogador
// ==============================

model Jogador {
  @@map("jogador")

  // === CADASTRO ==
  id         String     @id @default(uuid())
  nome       String
  numeroWpp  String     @unique
  email      String?    @unique
  sexo       Sexo?

  // === STATS IN-GAME ===
  moedas       Int        @default(0)      // Dinheiro in-game
  xp           Int        @default(0)      
  level        Int        @default(1)
  hpAtual      Int        @default(100)    // Vida atual do jogador
  hpMaximo     Int        @default(100)    // Vida m√°xima (pode aumentar com n√≠vel ou itens)
  mana         Int        @default(100)    // Mana para magos
  energia      Int        @default(100)    // Energia para o resto das classes
  forca        Int        @default(10)
  defesa       Int        @default(10)
  agilidade    Int        @default(10)
  inteligencia Int        @default(10)
  sorte        Int        @default(5)

  // === ADMIN ===
  isAdmin     Boolean  @default(false)

  // === CLASSE ===
  classeId   String?
  classe     Classes?   @relation(fields: [classeId], references: [id])

  // === INVENTARIO ===
  inventario Inventario[]    // Rela√ß√£o inversa
  criadoEm   DateTime   @default(now())

  // === GUILDA ===
  guildaLiderada Guilda[] @relation("LiderDaGuilda")
  guildasMembro  Guilda[] @relation("MembrosDaGuilda")

  // === LOCALIZACAO NO MAPA ===
  localizacaoAtualId  String?  
  localizacaoAtual    Mapa? @relation(fields: [localizacaoAtualId], references: [id])
  viajando            Boolean  @default(false) // verifica se ja ta viajando

  // === CONQUISTAS ===
  conquistas       ConquistaDoJogador[]  // Rela√ß√£o inversa para conquistas do jogador
  conquistasAtivas ConquistaAtiva[]      // Rela√ß√£o inversa para conquistas ativas

}





// ==============================
// ‚öîÔ∏è Model: Classes
// ==============================

model Classes {
  @@map("classes")

  id          String        @id     // Ex: "guerreiro", "mago"
  nome        String
  descricao   String
  habilidades Habilidades[]         // Rela√ß√£o inversa
  jogadores   Jogador[]             // Rela√ß√£o inversa
}




// ==============================
// üåÄ Model: Habilidades
// ==============================

model Habilidades {
  @@map("habilidades")

  id           String   @id // Ex: "golpe_furioso"
  nome         String
  descricao    String
  xpRequerido  Int
  custoEnergia Int
  classeId     String
  classe       Classes  @relation(fields: [classeId], references: [id])
}





// ==============================
//  üíÅüèª‚Äç‚ôÇÔ∏è Model: Conquista
// 	Cat√°logo: guarda todas as conquistas do jogo
// ==============================

model Conquista {
  @@map("conquista")

  id        Int      @id @default(autoincrement())
  nome      String
  descricao String
  emoji     String?
  tipo      String?
  raridade  String?
  data      DateTime @default(now())

  jogadores   ConquistaDoJogador[]   // Rela√ß√£o inversa para jogadores que t√™m essa conquista
  jogadoresAtivos ConquistaAtiva[]   // Rela√ß√£o inversa para jogadores com conquista ativa
}




// ==============================
//  üíÅüèª‚Äç‚ôÇÔ∏è Model: ConquistaDoJogador
//  Marca quem ganhou qual conquista
// ==============================

model ConquistaDoJogador {
  @@map("conquista_do_jogador")

  id          String   @id @default(uuid())
  jogadorId   String
  conquistaId Int
  recebidaEm  DateTime @default(now())

  jogador     Jogador   @relation(fields: [jogadorId], references: [id], onDelete: Cascade)
  conquista   Conquista @relation(fields: [conquistaId], references: [id], onDelete: Cascade)

  @@unique([jogadorId, conquistaId])
}




// ==============================
//  üíÅüèª‚Äç‚ôÇÔ∏è Model: conquistaAtiva
//  Marca quais conquistas est√£o ‚Äúativas‚Äù no /status
// ==============================

model ConquistaAtiva {
  @@map("conquista_ativa")

  id          String   @id @default(uuid())
  jogadorId   String
  conquistaId Int
  ativadaEm   DateTime @default(now())
  emUso       Boolean  @default(false)

  jogador     Jogador   @relation(fields: [jogadorId], references: [id], onDelete: Cascade)
  conquista   Conquista @relation(fields: [conquistaId], references: [id], onDelete: Cascade)

  @@unique([jogadorId, conquistaId])
}






// ==============================
// üéí Model: Item
// ==============================

model Item {
  @@map("item")

  id         String        @id    // Ex: "pote_vida", "elmo_sagrado"
  nome       String
  tipo       String               // Ex: "elmo", "consumivel", "bota"
  descricao  String
  raridade   String

  atributos  Json?                // Ex: { hp: 25, def: 12, hpRecuperado: 50 }
  efeitos    Json?                // Ex: { passivo: 'Reduz em 10% o dano m√°gico' }

  inventarios Inventario[]        // Rela√ß√£o inversa
  criadoEm   DateTime      @default(now())
}





// ==============================
// üéí Model: Inventario
// ==============================

model Inventario {
  @@map("inventario")

  id         String   @id @default(uuid())    // ID √∫nico do registro no invent√°rio
  jogadorId  String                           // Dono do item (Jogador)
  itemId     String                           // Item armazenado
  quantidade Int      @default(1)             // Quantidade do mesmo item no inv (ex: 5 po√ß√µes)
  equipado   Boolean  @default(false)         // True = item equipado / False = desequipado
  criadoEm   DateTime @default(now())         // Timestamp de aquisi√ß√£o (quando ele ganhou o item)

  jogador    Jogador  @relation(fields: [jogadorId], references: [id])
  item       Item     @relation(fields: [itemId], references: [id])
}





// ==============================
// ü§ù Model: Guilda
// ==============================

model Guilda {
  @@map("guilda")

  id          String   @id @default(uuid())
  nome        String
  descricao   String
  liderId     String
  criadoEm    DateTime @default(now())

  // Rela√ß√£o com o l√≠der da guilda
  lider       Jogador  @relation("LiderDaGuilda", fields: [liderId], references: [id])

  // Rela√ß√£o com os membros da guilda
  membros     Jogador[] @relation("MembrosDaGuilda")
}






// ==============================
// üåé Model: Mapa
// ==============================

model Mapa {
  @@map("mapa")

  id          String   @id @default(uuid())
  nome        String
  tipo        String                          // Ex: "cidade", "floresta", "dungeon"
  descricao   String                          // Ex: "Cidade de Arkevia"
  conexoes    Json?                           // Ex: { norte: "floresta_sombria", leste: "castelo_rasgado" }
  npcs        Json?                           // Ex: ["ferreiro", "taverneiro"]
  inimigos    Json?                           // Ex: ["lobisomem", "goblin"]
  coordenada  Json?                           // ou String? se for string, but! Json √© melhor pra objeto { x, y }
  criadoEm    DateTime @default(now())

  jogadoresNoMapa Jogador[]                   // rela√ß√£o inversa do localizacaoAtual no model Jogador
}


















// ==============================
//        !!! Enums !!!
// ==============================

enum Sexo {
  masculino
  feminino
}
